#include "pch.h"
#include <iostream>
#include <fstream>
#include <chrono>
#include <vector>
#include <string>
#include <Windows.h>
#include <sstream>
#include <climits>
#include <stdio.h>
#include <limits>
#include "spaces.h"


using namespace std;
int diena;
int dt1 = 0;
int dt2 = 0;
int dt3 = 0;

struct preke {
	string name;
	double kaina;
	int kodas;
	string prekestipas;
};
struct ataskaita {
	int parduota_vnt;
	int liko_vnt;
	int uzsakyta_vnt;
	double kiek_reikejo_gauti;
	double parduota_pinigais;
};

class sandelys {
private:
	vector <string> type = { "mesa_zuvis", "chillas", "gerimai", "bakaleja", "chemija", "VD", "VDKG", "giliai_saldyti", "non_food", "pasiulymas" };
	vector <preke> prekes;
	vector <ataskaita> apskaita;
	vector <int> parduota;
	vector <int> buvo;
	vector <int> liko;
	vector <int> yra;
	int uzsakymaskiek;
	int like_likuciai;
	int parduotos_prekes;
	double norimas_uzdarbis;
	double gautas_uzdarbis;
	int EPkiekis;
	int DDkiekis;
	int VDPkiekis;
	int vietos_counter = 0;
	int made_this_day;
	int random_daily_profit;
public:
	void prekeAdd(string name, int code, double kaina, string tipas);
	void prekeRemove(int code);
	bool ifpreke(int code);
	bool prekiu1K();
	bool prekiutipunustatymas(string tipas);
	void uzsakymas(int diena);
	void planuotaskiekispinigu();
	void likutis_pardavimas(int diena);
	void dienosapskaita();
	void uzsakymas_cout(int diena);
	void likutis_pardavimas_cout(int diena);
	void planuotaskiekispinigu_cout();
	void dienosapskaita_cout();
	void esamosprekes();
	void stackcase4();
	void stackcase5();
	void stackcase6();
	preke preke;
	ataskaita ataskaita;
};
void sandelys::dienosapskaita_cout() {
	dienosapskaita();
	for (int i = 0; i < apskaita.size(); i++)
		cout << "Parduota vienetais: " << apskaita[i].parduota_vnt << ". Liko vienetais: " << apskaita[i].liko_vnt << ". Uzsakyta vienetais: " << apskaita[i].uzsakyta_vnt << endl;
	planuotaskiekispinigu_cout();
}
void sandelys::dienosapskaita() {
	ataskaita.parduota_vnt = parduotos_prekes;
	ataskaita.liko_vnt = like_likuciai;
	ataskaita.uzsakyta_vnt = uzsakymaskiek;
	apskaita.push_back(ataskaita);

	planuotaskiekispinigu();
}
void sandelys::prekeAdd(string name, int code, double kaina, string tipas) {
	if (prekiu1K()) {
		if (ifpreke(code)) {
			preke.name = name;
			preke.kodas = code;
			preke.kaina = kaina;
			preke.prekestipas = tipas;
			prekes.push_back(preke);
			parduota.push_back(0);
			liko.push_back(0);
			yra.push_back(0);
			buvo.push_back(0);
		}
	}
}
bool sandelys::ifpreke(int code) {
	int g = 0;
	bool OK = true;
	for (int i = 0; i < prekes.size(); i++) {
		if (prekes[i].kodas == code) {
			g++;
		}
	}
	if (g > 0) {
		OK = false;
	}
	else if (g == 0) {
		OK = true;
	}
	return OK;
}
void sandelys::prekeRemove(int code) {
	int g = -1;
	for (int i = 0; i < prekes.size(); i++) {
		if (prekes[i].kodas == code) {
			g = i;
			prekes.erase(prekes.begin() + g);
			parduota.erase(parduota.begin() + g);
			buvo.erase(buvo.begin() + g);
			yra.erase(yra.begin() + g);
			liko.erase(liko.begin() + g);
		}
	}
	if (g < 0) cout << "Nera tokios prekes" << endl;
	else cout << "Preke pasalinta" << endl;
}
bool sandelys::prekiu1K() {
	bool OK = true;
	if (prekes.size() < 1000) {
		OK = true;
	}
	else if (prekes.size() == 1000) {
		OK = false;
	}
	return OK;
}
bool sandelys::prekiutipunustatymas(string tipas) {
	bool OK = false;
	for (int i = 0; i < type.size(); i++)
		if (tipas == type[i])
			OK = true;
	return OK;

}
void sandelys::esamosprekes() {
	string forname, forcode, forprice, fortype;
	for (int i = 0; i < prekes.size(); i++) {
		forname = prekes[i].name;
		forcode = to_string(prekes[i].kodas);
		forprice = to_string(prekes[i].kaina);
		fortype = prekes[i].prekestipas;
		while (forname.length() < 25) {
			forname.append(" ");
		}
		while (forcode.length() < 15) {
			forcode.append(" ");
		}
		while (forprice.length() < 15) {
			forprice.append(" ");
		}
		while (fortype.length() < 16) {
			fortype.append(" ");
		}
		cout << forname << " " << forcode << " " << forprice << " " << fortype << endl;
	}
}
void sandelys::likutis_pardavimas(int diena) {
	if (diena == 1) {
		for (int i = 0; i < prekes.size(); i++) {
			if (prekes[i].prekestipas == type[0]) {
				yra[i] = mesamax;
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = mesamax - parduota[i];
			}
			else if (prekes[i].prekestipas == type[1]) {
				yra[i] = chillasmax;
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = chillasmax - parduota[i];
			}
			else if (prekes[i].prekestipas == type[2]) {
				yra[i] = gerimaimax;
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = gerimaimax - parduota[i];
			}
			else if (prekes[i].prekestipas == type[3]) {
				yra[i] = bakalejamax;
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = bakalejamax - parduota[i];
			}
			else if (prekes[i].prekestipas == type[4]) {
				yra[i] = chemijamax;
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = chemijamax - parduota[i];
			}
			else if (prekes[i].prekestipas == type[5]) {
				yra[i] = VDmax;
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = VDmax - parduota[i];
			}
			else if (prekes[i].prekestipas == type[6]) {
				yra[i] = VDKGmax;
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = VDKGmax - parduota[i];
			}
			else if (prekes[i].prekestipas == type[7]) {
				yra[i] = giliaisaldytimax;
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = giliaisaldytimax - parduota[i];
			}
			else if (prekes[i].prekestipas == type[8]) {
				yra[i] = non_foodmax;
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = non_foodmax - parduota[i];
			}
			else if (prekes[i].prekestipas == type[9]) {
				yra[i] = pasiulymasmax;
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = pasiulymasmax - parduota[i];
			}
			buvo[i] = yra[i];
		}
	}
	else if (diena > 1) {
		for (int i = 0; i < prekes.size(); i++) {
			if (prekes[i].prekestipas == type[0]) {
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = yra[i] - parduota[i];
			}
			else if (prekes[i].prekestipas == type[1]) {
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = yra[i] - parduota[i];
			}
			else if (prekes[i].prekestipas == type[2]) {
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = yra[i] - parduota[i];
			}
			else if (prekes[i].prekestipas == type[3]) {
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = yra[i] - parduota[i];
			}
			else if (prekes[i].prekestipas == type[4]) {
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = yra[i] - parduota[i];
			}
			else if (prekes[i].prekestipas == type[5]) {
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = yra[i] - parduota[i];
			}
			else if (prekes[i].prekestipas == type[6]) {
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = yra[i] - parduota[i];
			}
			else if (prekes[i].prekestipas == type[7]) {
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = yra[i] - parduota[i];
			}
			else if (prekes[i].prekestipas == type[8]) {
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = yra[i] - parduota[i];
			}
			else if (prekes[i].prekestipas == type[9]) {
				parduota[i] = rand() % (yra[i] + 1);
				liko[i] = yra[i] - parduota[i];
			}
			buvo[i] = yra[i];
		}
	};
}
void sandelys::likutis_pardavimas_cout(int diena) {
	likutis_pardavimas(diena);
	for (int i = 0; i < prekes.size(); i++)
		cout << "Prekes vardas: " << prekes[i].name << ". Prekiu kiekis dienos pradzioje: " << buvo[i] << ". Prekiu kiekis dienos pabaigoje: " << liko[i] << ". Parduota vienetais: " << parduota[i] << endl;
}
void sandelys::uzsakymas_cout(int diena) {
	uzsakymas(diena);
	for (int i = 0; i < prekes.size(); i++)
		cout << "Prekes pavadinimas: " << prekes[i].name << ". Prekiu kiekis kitos dienos pradzioje: " << yra[i] << endl;
	cout << vietos_counter << endl;
	cout << "Euro paleciu kiekis: " << EPkiekis << ". DD paleciu kiekis: " << DDkiekis << endl;
}
void sandelys::uzsakymas(int diena) {
	int temp;
	vietos_counter = 0;
	for (int i = 0; i < prekes.size(); i++) {
		if (prekes[i].prekestipas == type[0]) {
			temp = parduota[i] / mesa_zuvis_dez;
			vietos_counter += temp * mesai_zuviai_vt;
			yra[i] = liko[i] + temp * mesa_zuvis_dez;
			uzsakymaskiek += temp * mesa_zuvis_dez;
			if (yra[i] == 0 && parduota[i] == 0) {
				temp = mesamax / mesa_zuvis_dez;
				yra[i] = mesa_zuvis_dez * temp;
				uzsakymaskiek += temp * mesa_zuvis_dez;
				vietos_counter += temp * mesai_zuviai_vt;
			}
		}
		else if (prekes[i].prekestipas == type[1]) {
			temp = parduota[i] / chilas_dez;
			vietos_counter += temp * chillui_vt;
			yra[i] = liko[i] + temp * chilas_dez;
			uzsakymaskiek += temp * chilas_dez;
			if (yra[i] == 0 && parduota[i] == 0) {
				temp = chillasmax / chilas_dez;
				yra[i] = chilas_dez * temp;
				uzsakymaskiek += temp * chilas_dez;
				vietos_counter += temp * chillui_vt;
			}

		}
		else if (prekes[i].prekestipas == type[2]) {
			temp = parduota[i] / gerimai_dez;
			vietos_counter += temp * gerimui_vt;
			yra[i] = liko[i] + temp * gerimai_dez;
			uzsakymaskiek += temp * gerimai_dez;
			if (yra[i] == 0 && parduota[i] == 0) {
				temp = gerimaimax / gerimai_dez;
				yra[i] = gerimai_dez * temp;
				uzsakymaskiek += temp * gerimai_dez;
				vietos_counter += temp * gerimui_vt;
			}
		}
		else if (prekes[i].prekestipas == type[3]) {
			temp = parduota[i] / bakalejai_dez;
			vietos_counter += temp * bakalejai_vt;
			yra[i] = liko[i] + temp * bakalejai_dez;
			uzsakymaskiek += temp * bakalejai_dez;
			if (yra[i] == 0 && parduota[i] == 0) {
				temp = bakalejamax / bakalejai_dez;
				yra[i] = bakalejai_dez * temp;
				uzsakymaskiek += temp * bakalejai_dez;
				vietos_counter += temp * bakalejai_vt;
			}
		}
		else if (prekes[i].prekestipas == type[4]) {
			temp = parduota[i] / chemijai_dez;
			vietos_counter += temp * chemijai_vt;
			yra[i] = liko[i] + temp * chemijai_dez;
			uzsakymaskiek += temp * chemijai_dez;
			if (yra[i] == 0 && parduota[i] == 0) {
				temp = chemijamax / chemijai_dez;
				yra[i] = chemijai_dez * temp;
				uzsakymaskiek += temp * chemijai_dez;
				vietos_counter += temp * chemijai_vt;
			}
		}
		else if (prekes[i].prekestipas == type[5]) {
			temp = parduota[i] / VD_dez;
			vietos_counter += temp * VD_vt;
			yra[i] = liko[i] + temp * VD_dez;
			uzsakymaskiek += temp * VD_dez;
			if (yra[i] == 0 && parduota[i] == 0) {
				temp = VDmax / VD_dez;
				yra[i] = VD_dez * temp;
				uzsakymaskiek += temp * VD_dez;
				vietos_counter += temp * VD_vt;
			}
		}
		else if (prekes[i].prekestipas == type[6]) {
			temp = parduota[i] / VDKG;
			vietos_counter += temp * VDKG;
			yra[i] = liko[i] + temp * VDKG;
			uzsakymaskiek += temp * VDKG;
			if (yra[i] == 0 && parduota[i] == 0) {
				temp = VDKGmax / VDKG;
				yra[i] = VDKG * temp;
				uzsakymaskiek += temp * VDKG;
				vietos_counter += temp * VDKG;
			}
		}
		else if (prekes[i].prekestipas == type[7]) {
			temp = parduota[i] / giliai_saldyti_dez;
			vietos_counter += temp * giliai_saldyti_vt;
			yra[i] = liko[i] + temp * giliai_saldyti_dez;
			uzsakymaskiek += temp * giliai_saldyti_dez;
			if (yra[i] == 0 && parduota[i] == 0) {
				temp = giliaisaldytimax / giliai_saldyti_dez;
				yra[i] = giliai_saldyti_dez * temp;
				uzsakymaskiek += temp * giliai_saldyti_dez;
				vietos_counter += temp * giliai_saldyti_vt;
			}
		}
		else if (prekes[i].prekestipas == type[8]) {
			temp = parduota[i] / non_food_dez;
			vietos_counter += temp * non_food_vt;
			yra[i] = liko[i] + temp * non_food_dez;
			uzsakymaskiek += temp * non_food_dez;
			if (yra[i] == 0 && parduota[i] == 0) {
				temp = non_foodmax / non_food_dez;
				yra[i] = non_food_dez * temp;
				uzsakymaskiek += temp * non_food_dez;
				vietos_counter += temp * non_food_vt;
			}
		}
		else if (prekes[i].prekestipas == type[9]) {
			yra[i] = liko[i];
			if (yra[i] == 0 && parduota[i] == 0) {
				yra[i] = pasiulymas;
			}
		}
		parduotos_prekes += parduota[i];
		like_likuciai += liko[i];
	}
	if (vietos_counter > 200) {
		if (vietos_counter <= EP && vietos_counter > DD) {
			EPkiekis = 1;
		}
		else if (vietos_counter > EP) {
			EPkiekis = vietos_counter / EP;
			vietos_counter -= EP * EPkiekis;
		}
	}
	else if (vietos_counter <= DD) {
		DDkiekis = 1;
	}
}
void sandelys::stackcase4() {
	for (int i = 0; i < prekes.size(); i++)
		cout << "Prekes vardas: " << prekes[i].name << ". Prekiu kiekis dienos pradzioje: " << buvo[i] << ". Prekiu kiekis dienos pabaigoje: " << liko[i] << " " << ". Parduota vienetais: " << parduota[i] << endl;
}
void sandelys::stackcase5() {
	for (int i = 0; i < prekes.size(); i++)
		cout << "Prekes pavadinimas: " << prekes[i].name << ". Prekiu kiekis kitos dienos pradzioje: " << yra[i] << endl;
	cout << vietos_counter << endl;
	cout << "Euro paleciu kiekis: " << EPkiekis << ". DD paleciu kiekis: " << DDkiekis << endl;
}
void sandelys::stackcase6() {
	for (int i = 0; i < apskaita.size(); i++)
		cout << "Parduota vienetais: " << apskaita[i].parduota_vnt << "  Liko vienetais: " << apskaita[i].liko_vnt << "  Uzsakyta vienetais: " << apskaita[i].uzsakyta_vnt << endl;
	if (made_this_day >= random_daily_profit) {
		cout << "Uzdirbom daugiau nei buvo suplanuota" << endl;
		cout << "Musu uzdirbis: " << made_this_day << "  Musu tikslas: " << random_daily_profit << "  Skirtumas: " << made_this_day - random_daily_profit << endl;
	}
	else if (made_this_day < random_daily_profit) {
		cout << "Uzdirbom maziau nei buvo suplanuota" << endl;
		cout << "Musu uzdirbis: " << made_this_day << "  Musu tikslas: " << random_daily_profit << "  Skirtumas: " << made_this_day - random_daily_profit << endl;
	}
}
void sandelys::planuotaskiekispinigu_cout() {
	planuotaskiekispinigu();
	if (made_this_day >= random_daily_profit) {
		cout << "Uzdirbom daugiau nei buvo suplanuota" << endl;
		cout << "Musu uzdirbis: " << made_this_day << "  Musu tikslas: " << random_daily_profit << "  Skirtumas: " << made_this_day - random_daily_profit << endl;
	}
	else if (made_this_day < random_daily_profit) {
		cout << "Uzdirbom maziau nei buvo suplanuota" << endl;
		cout << "Musu uzdirbis: " << made_this_day << "  Musu tikslas: " << random_daily_profit << "  Skirtumas: " << made_this_day - random_daily_profit << endl;
	}
}
void sandelys::planuotaskiekispinigu() {
	int total = 0;
	random_daily_profit = 0;
	made_this_day = 0;
	for (int i = 0; i < prekes.size(); i++) {
		total += buvo[i] * prekes[i].kaina;
		made_this_day += parduota[i] * prekes[i].kaina;
	}
	int temp1 = total * 30 / 100;
	int temp2 = total * 70 / 100;
	random_daily_profit = rand() % (temp2 + 1) + temp1;
}
void SetCursorPosition(int x, int y) {
	HANDLE output = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD pos = { x, y };
	SetConsoleCursorPosition(output, pos);
}
bool yesorno(int which) {
	bool OK = false;
	if (which == 0 || which == 1) {
		OK = true;
	}
	else OK = false;
	return OK;
}
bool dot(string lol) {
	bool answer = true;
	for (int i = 0; i < lol.size(); i++) {
		if (lol[i] >= 48 && lol[i] <= 57 || lol[i] == 46 && lol[i] == 44) {

		}
		else answer = false;
	}
	return answer;
}
bool sk(string lol) {
	bool answer = true;
	for (int i = 0; i < lol.size(); i++) {
		if (lol[i] >= 48 && lol[i] <= 57) {

		}
		else answer = false;
	}
	return answer;
}
void loltocode(int &code, string lol) {
	code = 0;
	for (int i = 0; i < lol.size(); i++) {
		code *= 10;
		code += lol[i] - '0';
	}
}

int main()
{
	string lol;
	HANDLE output = GetStdHandle(STD_OUTPUT_HANDLE);
	string forname, forcode, forprice, fortype;
	SetConsoleTextAttribute(output, 0b00001001);
	forname.resize(forname.size() + 30, ' ');
	forcode.resize(forcode.size() + 10, ' ');
	forprice.resize(forprice.size() + 6, ' ');
	fortype.resize(fortype.size() + 20, ' ');
	string temp1, temp4;
	int temp2;
	double temp3;
	int which = 0;
	string vardas, tipas;
	double price;
	int choose;
	int code;
	int tipass;
	preke PR;
	sandelys S;
	ifstream myfile("duom.txt");
	myfile >> diena;
	while (!myfile.eof()) {
		myfile >> temp1 >> temp2 >> temp3 >> temp4;
		PR.name = temp1;
		PR.kodas = temp2;
		PR.kaina = temp3;
		PR.prekestipas = temp4;
		S.prekeAdd(PR.name, PR.kodas, PR.kaina, PR.prekestipas);
	}
	srand(time(NULL));
	SetCursorPosition(22, 7);
	while (true) {
		SetConsoleTextAttribute(output, 0b00001001);
		SetCursorPosition(30, 8);
		cout << "Pasirinkite ka norite daryti" << endl;
		SetCursorPosition(30, 9);
		cout << "1. Prideti preke i asortimenta" << endl;
		SetCursorPosition(30, 10);
		cout << "2. Pasalinti preke is asortimento" << endl;
		SetCursorPosition(30, 11);
		cout << "3. Isvesti esamas prekes, ju kodus, kainas ir tipus" << endl;
		SetCursorPosition(30, 12);
		cout << "4. Dienos pardavimas ir likutis" << endl;
		SetCursorPosition(30, 13);
		cout << "5. Uzsakymas (koks prekiu kiekis bus kita diena, kiek paleciu atvaziuos)" << endl;
		SetCursorPosition(30, 14);
		cout << "6. Dienos ataskaita" << endl;
		SetCursorPosition(30, 15);
		cout << "7. Kita diena" << endl;
		SetCursorPosition(30, 16);
		cin >> choose;
		while (cin.fail() || choose != 1 && choose != 2 && choose != 3 && choose != 4 && choose != 5 && choose != 6 && choose != 7) {
			cin.clear();
			cin.ignore(INT_MAX, '\n');
			SetConsoleTextAttribute(output, 0b00001100);
			cout << " Iveskite pasirinkima is naujo " << endl;
			cin >> choose;
		}
		system("cls");
		switch (choose) {
		case 1:
			SetConsoleTextAttribute(output, 0b00001101);
			cout << "Paruosta prideti preke" << endl;
			cout << "Parasykite prekes, kuria norite prideti, koda" << endl;
			cin >> lol;
			while (sk(lol) == false) {
				cout << "Parasykite prekes, kuria norite prideti, koda" << endl;
				cin >> lol;
			}
			loltocode(code, lol);
			S.ifpreke(code);
			if (S.prekiu1K() == false) {
				cout << "Prekiu limitas pasiektas" << endl;
			}
			if (S.prekiu1K() == true && S.ifpreke(code) == true) {
				SetConsoleTextAttribute(output, 0b00000111);
				cout << "Parasykite prekes tipa (apacioje pateikti galimi variantai): \n mesa_zuvis \n chillas \n gerimai \n bakaleja \n chemija \n VD (vaisiai ir darzoves) \n VDKG (vaisia ir darzoves, sveriami) \n giliai_saldyti \n non_food" << endl;
				cin >> tipas;
				while (S.prekiutipunustatymas(tipas) == false) {
					SetConsoleTextAttribute(output, 0b00000011);
					cout << "Parasykite prekes tipa (apacioje pateikti galimi variantai): \n mesa_zuvis \n chillas \n gerimai \n bakaleja \n chemija \n VD (vaisiai ir darzoves) \n VDKG (vaisia ir darzoves, sveriami) \n giliai_saldyti \n non_food" << endl;
					cin >> tipas;
				}
				SetConsoleTextAttribute(output, 0b00001010);
				cout << "Parasykite prekes varda" << endl;
				cin >> vardas;
				SetConsoleTextAttribute(output, 0b00001101);
				cout << "Parasykite prekes kaina" << endl;
				cin >> price;
				SetConsoleTextAttribute(output, 0b0000001);
				S.prekeAdd(vardas, code, price, tipas);
				system("cls");
				SetConsoleTextAttribute(output, 0b00000111);
				cout << "Preke prideta" << endl;

			}
			else { SetConsoleTextAttribute(output, 0b00000111); cout << "Tokia preke jau yra" << endl; }

			break;
		case 2:
			SetConsoleTextAttribute(output, 0b00001101);
			cout << "Paruosta pasalinti preke" << endl;
			SetConsoleTextAttribute(output, 0b00000011);
			cout << "Parasykite prekes, kuria norite pasalinti, koda" << endl;
			cin >> code;
			system("cls");
			S.prekeRemove(code);
			//cout << "preke pasalinta" << endl;
			break;
		case 3:
			SetConsoleTextAttribute(output, 0b00001101);
			cout << "Esamos prekes parduotuveje, ju kodai bei kainos, tipai" << endl;
			SetConsoleTextAttribute(output, 0b00001010);
			cout << "Prekes pavadinimas      Prekes kodas    Prekes kaina   Prekes tipas" << endl;
			SetConsoleTextAttribute(output, 0b00000011);
			S.esamosprekes();
			while (which != 1) {
				SetConsoleTextAttribute(output, 0b00000001);
				cout << "Kai noresite baigti, paspauskite 1" << endl;
				cin >> which;
				if (which == 1) {
					which = 0;
					system("cls");
					break;
				}
			}
			break;
		case 4:
			system("cls");
			SetConsoleTextAttribute(output, 0b00001101);
			cout << "Dienos pardavimas ir likutis (prekiu)" << endl;
			if (dt1 == diena - 1) {
				dt1++;
				SetConsoleTextAttribute(output, 0b00001100);
				S.likutis_pardavimas_cout(diena);
			}
			else if (dt1 == diena) {
				SetConsoleTextAttribute(output, 0b00001100);
				S.stackcase4();
			}
			while (which != 1) {
				SetConsoleTextAttribute(output, 0b00000001);
				cout << "Kai noresite baigti, paspauskite 1" << endl;
				cin >> which;
				if (which == 1) {
					which = 0;
					system("cls");
					break;
				}
			}
			break;
		case 5:
			SetConsoleTextAttribute(output, 0b00001101);
			cout << "Uzsakymas (prekiu kiekis, koks skaicius bus kita diena, kiek paleciu atvaziuos" << endl;
			if (dt2 == diena - 1) {
				dt2++;
				if (dt1 == diena - 1) {
					S.likutis_pardavimas(diena);
					SetConsoleTextAttribute(output, 0b00000101);
					S.uzsakymas_cout(diena);
					dt1++;
				}
				else if (dt1 == diena) {
					SetConsoleTextAttribute(output, 0b00000101);
					S.uzsakymas_cout(diena);
				}
			}
			else if (dt2 == diena) {
				SetConsoleTextAttribute(output, 0b00001001);
				S.stackcase5();

			}
			while (which != 1) {
				SetConsoleTextAttribute(output, 0b00000001);
				cout << "Kai noresite baigti, paspauskite 1" << endl;
				cin >> which;
				if (which == 1) {
					which = 0;
					system("cls");
					break;
				}
			}
			break;
		case 6:
			SetConsoleTextAttribute(output, 0b00001101);
			cout << "Dienos ataskaita" << endl;
			if (dt3 == diena - 1) {
				dt3++;
				int which = 50;
				while (yesorno(which) == false) {
					SetConsoleTextAttribute(output, 0b00000100);
					cout << "Ar noresite pilnos ataskaitos? 1 = yes, 0 = no." << endl;
					cin >> which;
					yesorno(which);
				}
				if (which == 0) {
					if (dt1 == diena - 1 && dt2 == diena - 1) {
						S.likutis_pardavimas(diena);
						SetConsoleTextAttribute(output, 0b00000001);
						S.uzsakymas(diena);
						S.dienosapskaita_cout();
						dt1++;
						dt2++;
					}
					else if (dt1 == diena && dt2 == diena - 1) {
						S.uzsakymas(diena);
						SetConsoleTextAttribute(output, 0b00001000);
						S.dienosapskaita_cout();
						dt2++;
					}
					else if (dt1 == diena && dt2 == diena) {
						SetConsoleTextAttribute(output, 0b00001101);
						S.dienosapskaita_cout();
					}
				}
				else if (which == 1) {
					if (dt1 == diena - 1 && dt2 == diena - 1) {
						SetConsoleTextAttribute(output, 0b00001000);
						S.likutis_pardavimas_cout(diena);
						SetConsoleTextAttribute(output, 0b00000111);
						S.uzsakymas_cout(diena);
						SetConsoleTextAttribute(output, 0b00000011);
						S.dienosapskaita_cout();
						dt1++;
						dt2++;
					}
					else if (dt1 == diena && dt2 == diena - 1) {
						SetConsoleTextAttribute(output, 0b00001000);
						S.stackcase4();
						SetConsoleTextAttribute(output, 0b00000111);
						S.uzsakymas_cout(diena);
						SetConsoleTextAttribute(output, 0b00000011);
						S.dienosapskaita_cout();
						dt2++;
					}
					else if (dt1 == diena && dt2 == diena) {
						SetConsoleTextAttribute(output, 0b00000011);
						S.stackcase4();
						S.stackcase5();
						S.dienosapskaita_cout();
					}
				}
			}
			else if (dt3 == diena) {
				int which = 50;
				while (yesorno(which) == false) {
					SetConsoleTextAttribute(output, 0b00000001);
					cout << "Ar noresite pilnos ataskaitos? 1 = yes, 0 = no." << endl;
					cin >> which;
					yesorno(which);
				}
				if (which == 0) {
					SetConsoleTextAttribute(output, 0b00001011);
					S.stackcase6();
				}
				else if (which == 1) {
					SetConsoleTextAttribute(output, 0b00001011);
					S.stackcase4();
					SetConsoleTextAttribute(output, 0b00000001);
					S.stackcase5();
					SetConsoleTextAttribute(output, 0b00000011);
					S.stackcase6();
				}
			}
			which = 0;
			while (which != 1) {
				SetConsoleTextAttribute(output, 0b00000001);
				cout << "Kai noresite baigti, paspauskite 1" << endl;
				cin >> which;
				if (which == 1) {
					which = 0;
					system("cls");
					break;
				}
			}
			break;
		case 7:
			SetConsoleTextAttribute(output, 0b00001101);
			cout << "Kita diena" << endl;
			if (dt1 == diena - 1 && dt2 == diena - 1 && dt3 == diena - 1) {
				S.likutis_pardavimas(diena);
				S.uzsakymas(diena);
				S.dienosapskaita();
				dt1++;
				dt2++;
				dt3++;
			}
			else if (dt1 == diena && dt2 == diena - 1 && dt3 == diena - 1) {
				S.uzsakymas(diena);
				S.dienosapskaita();
				dt2++;
				dt3++;
			}
			else if (dt1 == diena && dt2 == diena && dt3 == diena - 1) {
				S.dienosapskaita();
				dt3++;
			}
			diena++;
			SetConsoleTextAttribute(output, 0b00000010);
			cout << "Diena: " << diena << endl;
			break;
		default:
			exit(0);
		}
	}

	return 0;
}
